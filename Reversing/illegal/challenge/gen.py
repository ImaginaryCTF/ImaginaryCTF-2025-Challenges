from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
from Crypto.Cipher import ARC4
import base64, random, string

# --- Helpers ---
def generate_license_key() -> str:
    while True:
        # Generate 25 random chars (A-Z, 0-9)
        chars = [random.choice(string.ascii_uppercase + string.digits) for _ in range(25)]
        # Compute checksum: sum(ord(c) % 36) % 36 must be 7
        total = sum((ord(c) % 36) for c in chars)
        if total % 36 == 7:
            break  # valid key
    # Insert dashes every 5 chars
    groups = [ ''.join(chars[i:i+5]) for i in range(0, 25, 5) ]
    return '-'.join(groups)

def deterministic_shuffle(data: bytes, seed: int) -> bytes:
    data = bytearray(data)
    n = len(data)
    for i in range(n):
        j = (i + seed * (i + 1)) % n
        data[i], data[j] = data[j], data[i]
    return bytes(data)

# --- RSA setup (your fixed values) ---
p = 24689950028973442457273985033197660392343278265116700212839107570418879527297552022536543532470127575072416107869193305523342073161296730850038403549031582319538507168380441733603171400025947539126714200508613697580993699421434841005549796020649370268878033192278951054255014542487754101113914700376477152635601990986750356439013509078034329750805795720438297922643322189700127584058065785054484103667041333944248329434656067651343370027859687995496415700990569566858477755914880276348087749726732010804900839541812129153566768045408829619349559523484100094873038285764662690268827758579622417429566153746229197331947
q = 28408219593913503380646476178411916874226143274132067581805459794998753376188891846030823007555139672243015539857159328949251587616283473408884310523636638922542729924592009664886950844448413783284814224607598190198601351264184211663668576748272669835580152670757467812598268470942540444523985231724800170036871029807496623221685636040590277418578570433764127296868046963622918108269555894960217259949987619993251115798715925451473515168726111322308444185175912813454246814221649577534758088812445098823628882540832242122285420476264993212694126202605091841479159570889608039628010907299275664019986266178025996129099
n = 701397522185828618510848689144141769697437689896256198450292185705109859171997422035448595344213238310599935761546507227145586997889267802727882254006212128665715259479298495016335295935617918597221108264157646296756173693328821375707478413840371160154021219872312339790070013576581593041274351519716226001932710350562964171877345004685711580962156605279574878006989339472636045161874912709847493504238149686396507832679605003965586890880990952041073510320469324548905541408310599957304827589243721478126274222195932168114283099328563879447938233775465671657881618285158602801168150361781856392930006354774353480956730859004866086394467279495168591604869515408399459090537939179992287578572547341396413257153557017569098084905689000418684173340720880629917824721126107715645386240102164837467817194542767352379856244478607224642294709998068407396061014954404234149821388635913337986155878230458457799263017931292713449032352536278714310149161272628555832368132182244134594811705949995726387737299686506183592979053247739062412749662824863144126368099113635523511146559478889856275411001080837561433881481306661502015218791699004203077809690399292921506723166584199942797815446126232706601490412458700448908951928021686850440569025753

priv = key = RSA.construct((n, 65537, pow(65537, -1, (p-1)*(q-1))))
pub = key.publickey()

# --- Export modulus and RC4 encrypt (license system data) ---
modulus = pub.n
mod_bytes = modulus.to_bytes((modulus.bit_length() + 7) // 8, "big")

rc4_key_mod = b')f\x10\t\x10y%\xd1jN\xf9\n\xff\xf5=_'
cipher = ARC4.new(rc4_key_mod)
enc_mod_bytes = cipher.encrypt(mod_bytes)

print("RC4 key (modulus):", rc4_key_mod)
print("Encrypted modulus:", list(enc_mod_bytes))

# --- Generate license key ---
license_key = generate_license_key()
print("Generated License Key:", license_key)

# --- Sign license key ---
h = SHA256.new(license_key.encode())
signature = pkcs1_15.new(priv).sign(h)   # 256 bytes

# --- RC4-encrypt the human-readable key ---
rc4_key_human = b'k\xd9\x9f\x1b\xe1\xd4_z\xdc\x8e\x1f\xa5\xe6G\xe3R'
cipher_human = ARC4.new(rc4_key_human)
enc_license_key = cipher_human.encrypt(license_key.encode())  # 29 bytes

# --- Concatenate into a fixed binary blob ---
blob = enc_license_key + signature   # 29 + 256 = 285 bytes
blob = deterministic_shuffle(blob, 64601)

kcipher1 = ARC4.new(enc_mod_bytes[:256])
kcipher2 = ARC4.new(enc_mod_bytes[:256])
print(kcipher1.encrypt(rc4_key_mod))
print(kcipher2.encrypt(rc4_key_human))

# --- Encode whole thing as base64 ---
license_blob = base64.b64encode(blob).decode()

print("License blob (base64):", license_blob)
