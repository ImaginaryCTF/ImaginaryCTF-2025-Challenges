#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def createBasket(self):
        pass

    def getInventory(self):
        pass

    def getBasket(self, basketId):
        """
        Parameters:
         - basketId

        """
        pass

    def addToBasket(self, basketId, itemId):
        """
        Parameters:
         - basketId
         - itemId

        """
        pass

    def pay(self, basketId, total):
        """
        Parameters:
         - basketId
         - total

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def createBasket(self):
        self.send_createBasket()
        return self.recv_createBasket()

    def send_createBasket(self):
        self._oprot.writeMessageBegin('createBasket', TMessageType.CALL, self._seqid)
        args = createBasket_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createBasket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createBasket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createBasket failed: unknown result")

    def getInventory(self):
        self.send_getInventory()
        return self.recv_getInventory()

    def send_getInventory(self):
        self._oprot.writeMessageBegin('getInventory', TMessageType.CALL, self._seqid)
        args = getInventory_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getInventory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getInventory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getInventory failed: unknown result")

    def getBasket(self, basketId):
        """
        Parameters:
         - basketId

        """
        self.send_getBasket(basketId)
        return self.recv_getBasket()

    def send_getBasket(self, basketId):
        self._oprot.writeMessageBegin('getBasket', TMessageType.CALL, self._seqid)
        args = getBasket_args()
        args.basketId = basketId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getBasket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getBasket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.basketNotFound is not None:
            raise result.basketNotFound
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getBasket failed: unknown result")

    def addToBasket(self, basketId, itemId):
        """
        Parameters:
         - basketId
         - itemId

        """
        self.send_addToBasket(basketId, itemId)
        self.recv_addToBasket()

    def send_addToBasket(self, basketId, itemId):
        self._oprot.writeMessageBegin('addToBasket', TMessageType.CALL, self._seqid)
        args = addToBasket_args()
        args.basketId = basketId
        args.itemId = itemId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addToBasket(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addToBasket_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.basketNotFound is not None:
            raise result.basketNotFound
        if result.itemNotFound is not None:
            raise result.itemNotFound
        return

    def pay(self, basketId, total):
        """
        Parameters:
         - basketId
         - total

        """
        self.send_pay(basketId, total)
        return self.recv_pay()

    def send_pay(self, basketId, total):
        self._oprot.writeMessageBegin('pay', TMessageType.CALL, self._seqid)
        args = pay_args()
        args.basketId = basketId
        args.total = total
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_pay(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = pay_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.basketNotFound is not None:
            raise result.basketNotFound
        if result.wrongTotal is not None:
            raise result.wrongTotal
        raise TApplicationException(TApplicationException.MISSING_RESULT, "pay failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["createBasket"] = Processor.process_createBasket
        self._processMap["getInventory"] = Processor.process_getInventory
        self._processMap["getBasket"] = Processor.process_getBasket
        self._processMap["addToBasket"] = Processor.process_addToBasket
        self._processMap["pay"] = Processor.process_pay
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_createBasket(self, seqid, iprot, oprot):
        args = createBasket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createBasket_result()
        try:
            result.success = self._handler.createBasket()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createBasket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getInventory(self, seqid, iprot, oprot):
        args = getInventory_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getInventory_result()
        try:
            result.success = self._handler.getInventory()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getInventory", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getBasket(self, seqid, iprot, oprot):
        args = getBasket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBasket_result()
        try:
            result.success = self._handler.getBasket(args.basketId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BasketNotFound as basketNotFound:
            msg_type = TMessageType.REPLY
            result.basketNotFound = basketNotFound
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getBasket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addToBasket(self, seqid, iprot, oprot):
        args = addToBasket_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addToBasket_result()
        try:
            self._handler.addToBasket(args.basketId, args.itemId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BasketNotFound as basketNotFound:
            msg_type = TMessageType.REPLY
            result.basketNotFound = basketNotFound
        except ItemNotFound as itemNotFound:
            msg_type = TMessageType.REPLY
            result.itemNotFound = itemNotFound
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addToBasket", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_pay(self, seqid, iprot, oprot):
        args = pay_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = pay_result()
        try:
            result.success = self._handler.pay(args.basketId, args.total)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except BasketNotFound as basketNotFound:
            msg_type = TMessageType.REPLY
            result.basketNotFound = basketNotFound
        except WrongTotal as wrongTotal:
            msg_type = TMessageType.REPLY
            result.wrongTotal = wrongTotal
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("pay", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class createBasket_args(object):
    thrift_spec = None


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createBasket_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createBasket_args)
createBasket_args.thrift_spec = (
)


class createBasket_result(object):
    """
    Attributes:
     - success

    """
    thrift_spec = None


    def __init__(self, success = None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CreateBasketResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createBasket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createBasket_result)
createBasket_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CreateBasketResponse, None], None, ),  # 0
)


class getInventory_args(object):
    thrift_spec = None


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getInventory_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getInventory_args)
getInventory_args.thrift_spec = (
)


class getInventory_result(object):
    """
    Attributes:
     - success

    """
    thrift_spec = None


    def __init__(self, success = None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetInventoryResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getInventory_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getInventory_result)
getInventory_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [GetInventoryResponse, None], None, ),  # 0
)


class getBasket_args(object):
    """
    Attributes:
     - basketId

    """
    thrift_spec = None


    def __init__(self, basketId = None,):
        self.basketId = basketId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.basketId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBasket_args')
        if self.basketId is not None:
            oprot.writeFieldBegin('basketId', TType.STRING, 1)
            oprot.writeString(self.basketId.encode('utf-8') if sys.version_info[0] == 2 else self.basketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBasket_args)
getBasket_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'basketId', 'UTF8', None, ),  # 1
)


class getBasket_result(object):
    """
    Attributes:
     - success
     - basketNotFound

    """
    thrift_spec = None


    def __init__(self, success = None, basketNotFound = None,):
        self.success = success
        self.basketNotFound = basketNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = GetBasketResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.basketNotFound = BasketNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBasket_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.basketNotFound is not None:
            oprot.writeFieldBegin('basketNotFound', TType.STRUCT, 1)
            self.basketNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBasket_result)
getBasket_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [GetBasketResponse, None], None, ),  # 0
    (1, TType.STRUCT, 'basketNotFound', [BasketNotFound, None], None, ),  # 1
)


class addToBasket_args(object):
    """
    Attributes:
     - basketId
     - itemId

    """
    thrift_spec = None


    def __init__(self, basketId = None, itemId = None,):
        self.basketId = basketId
        self.itemId = itemId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.basketId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('addToBasket_args')
        if self.basketId is not None:
            oprot.writeFieldBegin('basketId', TType.STRING, 1)
            oprot.writeString(self.basketId.encode('utf-8') if sys.version_info[0] == 2 else self.basketId)
            oprot.writeFieldEnd()
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 2)
            oprot.writeString(self.itemId.encode('utf-8') if sys.version_info[0] == 2 else self.itemId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(addToBasket_args)
addToBasket_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'basketId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'itemId', 'UTF8', None, ),  # 2
)


class addToBasket_result(object):
    """
    Attributes:
     - basketNotFound
     - itemNotFound

    """
    thrift_spec = None


    def __init__(self, basketNotFound = None, itemNotFound = None,):
        self.basketNotFound = basketNotFound
        self.itemNotFound = itemNotFound

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.basketNotFound = BasketNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.itemNotFound = ItemNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('addToBasket_result')
        if self.basketNotFound is not None:
            oprot.writeFieldBegin('basketNotFound', TType.STRUCT, 1)
            self.basketNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.itemNotFound is not None:
            oprot.writeFieldBegin('itemNotFound', TType.STRUCT, 2)
            self.itemNotFound.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(addToBasket_result)
addToBasket_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'basketNotFound', [BasketNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'itemNotFound', [ItemNotFound, None], None, ),  # 2
)


class pay_args(object):
    """
    Attributes:
     - basketId
     - total

    """
    thrift_spec = None


    def __init__(self, basketId = None, total = None,):
        self.basketId = basketId
        self.total = total

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.basketId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.total = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pay_args')
        if self.basketId is not None:
            oprot.writeFieldBegin('basketId', TType.STRING, 1)
            oprot.writeString(self.basketId.encode('utf-8') if sys.version_info[0] == 2 else self.basketId)
            oprot.writeFieldEnd()
        if self.total is not None:
            oprot.writeFieldBegin('total', TType.I64, 2)
            oprot.writeI64(self.total)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pay_args)
pay_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'basketId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'total', None, None, ),  # 2
)


class pay_result(object):
    """
    Attributes:
     - success
     - basketNotFound
     - wrongTotal

    """
    thrift_spec = None


    def __init__(self, success = None, basketNotFound = None, wrongTotal = None,):
        self.success = success
        self.basketNotFound = basketNotFound
        self.wrongTotal = wrongTotal

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = PayResponse()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.basketNotFound = BasketNotFound.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.wrongTotal = WrongTotal.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pay_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.basketNotFound is not None:
            oprot.writeFieldBegin('basketNotFound', TType.STRUCT, 1)
            self.basketNotFound.write(oprot)
            oprot.writeFieldEnd()
        if self.wrongTotal is not None:
            oprot.writeFieldBegin('wrongTotal', TType.STRUCT, 2)
            self.wrongTotal.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pay_result)
pay_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [PayResponse, None], None, ),  # 0
    (1, TType.STRUCT, 'basketNotFound', [BasketNotFound, None], None, ),  # 1
    (2, TType.STRUCT, 'wrongTotal', [WrongTotal, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
